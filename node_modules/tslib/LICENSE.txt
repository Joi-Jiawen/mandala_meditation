Design Description Document

Requirement 1: 
The main menu and overall flow are represented by the `JobComparisonApp`. It provides methods to start the application, display menus, and invoke various functions. Menu disabling certain options (such as not allowing comparisons when there are no offers) is part of the interface logic, so it is not separately represented in the class diagram.

Requirement 2: 
Entering and editing the current job is triggered through the `JobComparisonApp.enterOrEditCurrentJobDetails(data)` operation, with job information stored in the `CurrentJob` class. The choice to save or cancel is user interaction and not implemented in the class diagram.

Requirement 3: 
Job Offer entry is completed through `JobComparisonApp.enterJobOffer(data)`, with the data structure represented by `JobOffer`, which inherits from `Job`. Like the current job, save or cancel behaviors are not represented in the class diagram.

Requirement 4: 
Comparison weights are represented by the `ComparisonSettings` class, which includes six integer weight properties, defaulted to 1, and provides a `getTotalWeight()` operation. Saving or canceling settings interactions are not represented in the class diagram.

Requirement 5: 
Ranking and comparison logic are implemented by `JobComparator`: `rankJobs()` sorts all jobs based on weighted scores; `computeScore()` implements the scoring formula given in the requirements; `computeComparisonMetrics()` generates data needed for the comparison table. The `Job` class contains all fields needed for jobs and provides `adjustedSalary()` and `adjustedBonus()` methods to support displaying adjusted values during comparison.

Requirement 6: 
The scoring formula is implemented through `JobComparator.computeScore(job, settings)`, which uses the calculation method given in the requirements.

Requirement 7: 
The requirement that the user interface must be intuitive and responsive is not reflected in the class diagram, as this is a UI design issue during implementation, not system logic.

Requirement 8: 
Regarding the assumption of standalone operation, the design reflects this by having `JobComparisonApp` aggregate `CurrentJob`, `JobOffer`, `ComparisonSettings`, and `JobComparator`, with all data managed in local memory.